
bool parseLltool() {
    {
        if (tok.kind.among(TokenKind.PercentPercent, TokenKind.KW_define, TokenKind.KW_eoi, TokenKind.KW_language, TokenKind.KW_start, TokenKind.KW_token)) {
             if (parseHeader())
                goto _error;
        }
        do {
             if (parseRule())
                goto _error;
        } while (tok.kind == TokenKind.Identifier);
        return false;
    }
_error:
    while (tok.kind != TokenKind.Eoi) {
        advance();
    }
    return false;
}

bool parseHeader() {
    {
        while (tok.kind.among(TokenKind.KW_define, TokenKind.KW_eoi, TokenKind.KW_language, TokenKind.KW_start, TokenKind.KW_token)) {
            if (tok.kind == TokenKind.KW_start) {
                advance();
                if (expect(TokenKind.Identifier))
                    goto _error;
                builder.startSymbol(tok.pos, tok.val);
                advance();
            }
            else if (tok.kind == TokenKind.KW_token) {
                advance();
                 if (parseTokenlist())
                    goto _error;
            }
            else if (tok.kind == TokenKind.KW_language) {
                advance();
                if (expect(TokenKind.String))
                    goto _error;
                builder.language(tok.pos, tok.val);
                advance();
            }
            else if (tok.kind == TokenKind.KW_define) {
                size_t pos; string ident, value; VarKind kind = VarKind.Flag;
                advance();
                pos = tok.pos; ident = tok.val;
                if (tok.kind == TokenKind.Identifier) {
                    advance();
                }
                else if (tok.kind == TokenKind.Qualidentifier) {
                    advance();
                }
                else {
                    /*ERROR*/
                    goto _error;
                }
                if (tok.kind.among(TokenKind.Code, TokenKind.Identifier, TokenKind.Qualidentifier, TokenKind.String)) {
                    value = tok.val;
                    if (tok.kind == TokenKind.Code) {
                        kind = VarKind.Code;
                        advance();
                    }
                    else if (tok.kind == TokenKind.Identifier) {
                        kind = VarKind.Identifier;
                        advance();
                    }
                    else if (tok.kind == TokenKind.Qualidentifier) {
                        kind = VarKind.Identifier;
                        advance();
                    }
                    else if (tok.kind == TokenKind.String) {
                        kind = VarKind.String;
                        advance();
                    }
                    else {
                        /*ERROR*/
                        goto _error;
                    }
                }
                builder.define(pos, ident, kind, value);
            }
            else if (tok.kind == TokenKind.KW_eoi) {
                advance();
                if (expect(TokenKind.Identifier))
                    goto _error;
                builder.eoiSymbol(tok.pos, tok.val);
                advance();
            }
        }
        if (consume(TokenKind.PercentPercent))
            goto _error;
        return false;
    }
_error:
    while (tok.kind != TokenKind.Identifier) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseTokenlist() {
    {
         if (parseTokendecl())
            goto _error;
        while (tok.kind == TokenKind.Comma) {
            advance();
             if (parseTokendecl())
                goto _error;
        }
        return false;
    }
_error:
    while (tok.kind != TokenKind.PercentPercent) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseTokendecl() {
    {
        size_t pos; string val, ext;
        if (tok.kind == TokenKind.Identifier) {
            pos = tok.pos; val = tok.val;
            advance();
        }
        else if (tok.kind == TokenKind.String) {
            pos = tok.pos; val = tok.val;
            advance();
        }
        else {
            /*ERROR*/
            goto _error;
        }
        if (tok.kind == TokenKind.Equal) {
            advance();
            if (expect(TokenKind.Identifier))
                goto _error;
            ext = tok.val;
            advance();
        }
        builder.terminal(pos, val, ext);
        return false;
    }
_error:
    while (!tok.kind.among(TokenKind.PercentPercent, TokenKind.Comma)) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseRule() {
    {
        Node node;
         if (parseNonterminal(node))
            goto _error;
        if (consume(TokenKind.Colon))
            goto _error;
         if (parseRhs(node.link))
            goto _error;
        node.link.back = node;
        if (consume(TokenKind.Semi))
            goto _error;
        return false;
    }
_error:
    while (!tok.kind.among(TokenKind.Eoi, TokenKind.Identifier)) {
        advance();
    }
    return false;
}

bool parseNonterminal(out Node node) {
    {
        if (expect(TokenKind.Identifier))
            goto _error;
        node = builder.nonterminal(tok.pos, tok.val);
        advance();
        if (tok.kind == TokenKind.Argument) {
            node.formalArgs = tok.val;
            advance();
        }
        if (tok.kind == TokenKind.Code) {
            advance();
        }
        return false;
    }
_error:
    while (tok.kind != TokenKind.Colon) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseRhs(out Node node) {
    {
         if (parseSequence(node))
            goto _error;
        if (tok.kind == TokenKind.Pipe) {
            node = builder.alternative(node.pos, node);
                                           auto alt = node.link; alt.back = node;
            do {
                if (consume(TokenKind.Pipe))
                    goto _error;
                 if (parseSequence(alt.link))
                    goto _error;
                alt = alt.link; alt.back = node;
            } while (tok.kind == TokenKind.Pipe);
        }
        return false;
    }
_error:
    while (!tok.kind.among(TokenKind.RightParenthesis, TokenKind.RightParenthesisStar, TokenKind.RightParenthesisPlus, TokenKind.RightParenthesisQuestion, TokenKind.Semi)) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseSequence(out Node node) {
    {
        Node last; node = builder.sequence(tok.pos);
        while (tok.kind.among(TokenKind.KW_if, TokenKind.LeftParenthesis, TokenKind.Code, TokenKind.Identifier, TokenKind.String)) {
            Node n;
            if (tok.kind == TokenKind.LeftParenthesis) {
                 if (parseGroup(n))
                    goto _error;
            }
            else if (tok.kind == TokenKind.Identifier) {
                n = builder.symbol(tok.pos, tok.val);
                advance();
                if (tok.kind == TokenKind.Argument) {
                    n.actualArgs = tok.val;
                    advance();
                }
            }
            else if (tok.kind == TokenKind.String) {
                n = builder.symbol(tok.pos, tok.val, true);
                advance();
            }
            else if (tok.kind == TokenKind.Code) {
                n = builder.code(tok.pos, tok.val);
                advance();
            }
            else if (tok.kind == TokenKind.KW_if) {
                advance();
                if (expect(TokenKind.Code))
                    goto _error;
                n = builder.code(tok.pos, tok.val); n.codeType = CodeType.Condition;
                advance();
            }
            else {
                /*ERROR*/
                goto _error;
            }
            if (last is null) node.inner = last = n;
                                           else last.next = n, last = n;
        }
        if (last !is null) last.back = node;
        return false;
    }
_error:
    while (!tok.kind.among(TokenKind.RightParenthesis, TokenKind.RightParenthesisStar, TokenKind.RightParenthesisPlus, TokenKind.RightParenthesisQuestion, TokenKind.Semi, TokenKind.Pipe)) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}

bool parseGroup(out Node node) {
    {
        if (expect(TokenKind.LeftParenthesis))
            goto _error;
        node = builder.group(tok.pos, Cardinality.One);
        advance();
         if (parseRhs(node.link))
            goto _error;
        node.link.back = node;
        if (tok.kind == TokenKind.RightParenthesis) {
            advance();
        }
        else if (tok.kind == TokenKind.RightParenthesisQuestion) {
            node.cardinality = Cardinality.ZeroOrOne;
            advance();
        }
        else if (tok.kind == TokenKind.RightParenthesisStar) {
            node.cardinality = Cardinality.ZeroOrMore;
            advance();
        }
        else if (tok.kind == TokenKind.RightParenthesisPlus) {
            node.cardinality = Cardinality.OneOrMore;
            advance();
        }
        else {
            /*ERROR*/
            goto _error;
        }
        return false;
    }
_error:
    while (!tok.kind.among(TokenKind.KW_if, TokenKind.LeftParenthesis, TokenKind.RightParenthesis, TokenKind.RightParenthesisStar, TokenKind.RightParenthesisPlus, TokenKind.RightParenthesisQuestion, TokenKind.Semi, TokenKind.Pipe, TokenKind.Code, TokenKind.Identifier, TokenKind.String)) {
        advance();
        if (tok.kind == TokenKind.Eoi) return true;
    }
    return false;
}
