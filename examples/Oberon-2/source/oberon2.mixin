
void parseModule() {
    if (consume(TokenKind.KW_MODULE))
        goto _error;
    if (consume(TokenKind.Ident))
        goto _error;
    if (consume(TokenKind.Semi))
        goto _error;
    if (tok.kind == TokenKind.KW_IMPORT) {
        parseImportList();
    }
    parseDeclSeq();
    if (tok.kind == TokenKind.KW_BEGIN) {
        advance();
        parseStatementSeq();
    }
    if (consume(TokenKind.KW_END))
        goto _error;
    if (consume(TokenKind.Ident))
        goto _error;
    if (consume(TokenKind.Period))
        goto _error;
    return;
_error:
    while (tok.kind != TokenKind.Eoi)
        advance();
}

void parseImportList() {
    if (consume(TokenKind.KW_IMPORT))
        goto _error;
    parseImport();
    while (tok.kind == TokenKind.Comma) {
        advance();
        parseImport();
    }
    if (consume(TokenKind.Semi))
        goto _error;
    return;
_error:
    while (!tok.kind.among(TokenKind.KW_BEGIN, TokenKind.KW_CONST, TokenKind.KW_END, TokenKind.KW_PROCEDURE, TokenKind.KW_TYPE, TokenKind.KW_VAR, TokenKind.Eoi))
        advance();
}

void parseImport() {
    string aliasName; size_t aliasPos;
    if (tok.kind == TokenKind.Ident && (isAlias())) {
        aliasName = tok.val; aliasPos = tok.pos;
        advance();
        if (consume(TokenKind.ColonEqual))
            goto _error;
    }
    if (expect(TokenKind.Ident))
        goto _error;
    addImport(tok.pos, tok.val, aliasPos, aliasName);
    advance();
    return;
_error:
    while (!tok.kind.among(TokenKind.Comma, TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseDeclSeq() {
    while (tok.kind.among(TokenKind.KW_CONST, TokenKind.KW_TYPE, TokenKind.KW_VAR)) {
        switch (tok.kind) {
            case TokenKind.KW_CONST:
                advance();
                while (tok.kind == TokenKind.Ident) {
                    parseConstDecl();
                    if (consume(TokenKind.Semi))
                        goto _error;
                }
                break;
            case TokenKind.KW_TYPE:
                advance();
                while (tok.kind == TokenKind.Ident) {
                    parseTypeDecl();
                    if (consume(TokenKind.Semi))
                        goto _error;
                }
                break;
            case TokenKind.KW_VAR:
                advance();
                while (tok.kind == TokenKind.Ident) {
                    parseVarDecl();
                    if (consume(TokenKind.Semi))
                        goto _error;
                }
                break;
            default: break;
        }
    }
    while (tok.kind == TokenKind.KW_PROCEDURE) {
        if (tok.kind == TokenKind.KW_PROCEDURE && (isProcDecl())) {
            parseProcDecl();
            if (consume(TokenKind.Semi))
                goto _error;
        }
        else if (tok.kind == TokenKind.KW_PROCEDURE) {
            parseForwardDecl();
            if (consume(TokenKind.Semi))
                goto _error;
        }
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.KW_BEGIN, TokenKind.KW_END, TokenKind.Eoi))
        advance();
}

void parseConstDecl() {
    parseIdentDef();
    if (consume(TokenKind.Equal))
        goto _error;
    parseConstExpr();
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseTypeDecl() {
    parseIdentDef();
    if (consume(TokenKind.Equal))
        goto _error;
    parseType();
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseVarDecl() {
    parseIdentList();
    if (consume(TokenKind.Colon))
        goto _error;
    parseType();
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseProcDecl() {
    if (consume(TokenKind.KW_PROCEDURE))
        goto _error;
    if (tok.kind == TokenKind.LeftParenthesis) {
        parseReceiver();
    }
    parseIdentDef();
    if (tok.kind == TokenKind.LeftParenthesis) {
        parseFormalPars();
    }
    if (consume(TokenKind.Semi))
        goto _error;
    parseDeclSeq();
    if (tok.kind == TokenKind.KW_BEGIN) {
        advance();
        parseStatementSeq();
    }
    if (consume(TokenKind.KW_END))
        goto _error;
    if (consume(TokenKind.Ident))
        goto _error;
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseForwardDecl() {
    if (consume(TokenKind.KW_PROCEDURE))
        goto _error;
    if (consume(TokenKind.Caret))
        goto _error;
    if (tok.kind == TokenKind.LeftParenthesis) {
        parseReceiver();
    }
    parseIdentDef();
    if (tok.kind == TokenKind.LeftParenthesis) {
        parseFormalPars();
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseFormalPars() {
    if (consume(TokenKind.LeftParenthesis))
        goto _error;
    if (tok.kind.among(TokenKind.KW_VAR, TokenKind.Ident)) {
        parseFPSection();
        while (tok.kind == TokenKind.Semi) {
            advance();
            parseFPSection();
        }
    }
    if (consume(TokenKind.RightParenthesis))
        goto _error;
    if (tok.kind == TokenKind.Colon) {
        advance();
        parseQualident();
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.RightParenthesis, TokenKind.Semi, TokenKind.KW_END, TokenKind.Eoi))
        advance();
}

void parseFPSection() {
    if (tok.kind == TokenKind.KW_VAR) {
        advance();
    }
    if (consume(TokenKind.Ident))
        goto _error;
    while (tok.kind == TokenKind.Comma) {
        advance();
        if (consume(TokenKind.Ident))
            goto _error;
    }
    if (consume(TokenKind.Colon))
        goto _error;
    parseType();
    return;
_error:
    while (!tok.kind.among(TokenKind.RightParenthesis, TokenKind.Semi, TokenKind.Eoi))
        advance();
}

void parseReceiver() {
    if (consume(TokenKind.LeftParenthesis))
        goto _error;
    if (tok.kind == TokenKind.KW_VAR) {
        advance();
    }
    if (consume(TokenKind.Ident))
        goto _error;
    if (consume(TokenKind.Colon))
        goto _error;
    if (consume(TokenKind.Ident))
        goto _error;
    if (consume(TokenKind.RightParenthesis))
        goto _error;
    return;
_error:
    while (!tok.kind.among(TokenKind.Eoi, TokenKind.Ident))
        advance();
}

void parseType() {
    switch (tok.kind) {
        case TokenKind.Ident:
            parseQualident();
            break;
        case TokenKind.KW_ARRAY:
            advance();
            if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
                parseConstExpr();
                while (tok.kind == TokenKind.Comma) {
                    advance();
                    parseConstExpr();
                }
            }
            if (consume(TokenKind.KW_OF))
                goto _error;
            parseType();
            break;
        case TokenKind.KW_RECORD:
            advance();
            if (tok.kind == TokenKind.LeftParenthesis) {
                advance();
                parseQualident();
                if (consume(TokenKind.RightParenthesis))
                    goto _error;
            }
            parseFieldList();
            while (tok.kind == TokenKind.Semi) {
                advance();
                parseFieldList();
            }
            if (consume(TokenKind.KW_END))
                goto _error;
            break;
        case TokenKind.KW_POINTER:
            advance();
            if (consume(TokenKind.KW_TO))
                goto _error;
            parseType();
            break;
        case TokenKind.KW_PROCEDURE:
            advance();
            if (tok.kind == TokenKind.LeftParenthesis) {
                parseFormalPars();
            }
            break;
        default:
            /*ERROR*/
            goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.RightParenthesis, TokenKind.Semi, TokenKind.KW_END, TokenKind.Eoi))
        advance();
}

void parseFieldList() {
    if (tok.kind == TokenKind.Ident) {
        parseIdentList();
        if (consume(TokenKind.Colon))
            goto _error;
        parseType();
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.KW_END, TokenKind.Eoi))
        advance();
}

void parseStatementSeq() {
    parseStatement();
    while (tok.kind == TokenKind.Semi) {
        advance();
        parseStatement();
    }
    return;
}

void parseStatement() {
    if (tok.kind.among(TokenKind.KW_CASE, TokenKind.KW_EXIT, TokenKind.KW_FOR, TokenKind.KW_IF, TokenKind.KW_LOOP, TokenKind.KW_REPEAT, TokenKind.KW_RETURN, TokenKind.KW_WHILE, TokenKind.KW_WITH, TokenKind.Ident)) {
        switch (tok.kind) {
            case TokenKind.Ident:
                parseDesignator();
                switch (tok.kind) {
                    case TokenKind.ColonEqual:
                        advance();
                        parseExpr();
                        break;
                    case TokenKind.LeftParenthesis:
                        if (tok.kind == TokenKind.LeftParenthesis) {
                            advance();
                            if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
                                parseExprList();
                            }
                            if (consume(TokenKind.RightParenthesis))
                                goto _error;
                        }
                        break;
                    default: break;
                }
                break;
            case TokenKind.KW_IF:
                advance();
                parseExpr();
                if (consume(TokenKind.KW_THEN))
                    goto _error;
                parseStatementSeq();
                if (tok.kind == TokenKind.KW_ELSIF) {
                    advance();
                    parseExpr();
                    if (consume(TokenKind.KW_THEN))
                        goto _error;
                    parseStatementSeq();
                }
                if (tok.kind == TokenKind.KW_ELSE) {
                    advance();
                    parseStatementSeq();
                }
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_CASE:
                advance();
                parseExpr();
                if (consume(TokenKind.KW_OF))
                    goto _error;
                parseCase();
                while (tok.kind == TokenKind.Pipe) {
                    advance();
                    parseCase();
                }
                if (tok.kind == TokenKind.KW_ELSE) {
                    advance();
                    parseStatementSeq();
                }
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_WHILE:
                advance();
                parseExpr();
                if (consume(TokenKind.KW_DO))
                    goto _error;
                parseStatementSeq();
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_REPEAT:
                advance();
                parseStatementSeq();
                if (consume(TokenKind.KW_UNTIL))
                    goto _error;
                parseExpr();
                break;
            case TokenKind.KW_FOR:
                advance();
                if (consume(TokenKind.Ident))
                    goto _error;
                if (consume(TokenKind.ColonEqual))
                    goto _error;
                parseExpr();
                if (consume(TokenKind.KW_TO))
                    goto _error;
                parseExpr();
                if (tok.kind == TokenKind.KW_BY) {
                    advance();
                    parseConstExpr();
                }
                if (consume(TokenKind.KW_DO))
                    goto _error;
                parseStatementSeq();
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_LOOP:
                advance();
                parseStatementSeq();
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_WITH:
                advance();
                parseGuard();
                if (consume(TokenKind.KW_DO))
                    goto _error;
                parseStatementSeq();
                while (tok.kind == TokenKind.Pipe) {
                    advance();
                    parseGuard();
                    if (consume(TokenKind.KW_DO))
                        goto _error;
                    parseStatementSeq();
                }
                if (tok.kind == TokenKind.KW_ELSE) {
                    advance();
                    parseStatementSeq();
                }
                if (consume(TokenKind.KW_END))
                    goto _error;
                break;
            case TokenKind.KW_EXIT:
                advance();
                break;
            case TokenKind.KW_RETURN:
                advance();
                if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
                    parseExpr();
                }
                break;
            default: break;
        }
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Semi, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_UNTIL, TokenKind.Pipe, TokenKind.Eoi))
        advance();
}

void parseCase() {
    if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
        parseCaseLabels();
        while (tok.kind == TokenKind.Comma) {
            advance();
            parseCaseLabels();
        }
        if (consume(TokenKind.Colon))
            goto _error;
        parseStatementSeq();
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.KW_ELSE, TokenKind.KW_END, TokenKind.Pipe, TokenKind.Eoi))
        advance();
}

void parseCaseLabels() {
    parseConstExpr();
    if (tok.kind == TokenKind.Ellipsis) {
        advance();
        parseConstExpr();
    }
    return;
}

void parseGuard() {
    parseQualident();
    if (consume(TokenKind.Colon))
        goto _error;
    parseQualident();
    return;
_error:
    while (!tok.kind.among(TokenKind.KW_DO, TokenKind.Eoi))
        advance();
}

void parseConstExpr() {
    parseExpr();
    return;
}

void parseExpr() {
    parseSimpleExpr();
    if (tok.kind.among(TokenKind.Hash, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_IN, TokenKind.KW_IS)) {
        parseRelation();
        parseSimpleExpr();
    }
    return;
}

void parseSimpleExpr() {
    if (tok.kind.among(TokenKind.Plus, TokenKind.Minus)) {
        switch (tok.kind) {
            case TokenKind.Plus:
                advance();
                break;
            case TokenKind.Minus:
                advance();
                break;
            default: break;
        }
    }
    parseTerm();
    while (tok.kind.among(TokenKind.Plus, TokenKind.Minus, TokenKind.KW_OR)) {
        parseAddOp();
        parseTerm();
    }
    return;
}

void parseTerm() {
    parseFactor();
    while (tok.kind.among(TokenKind.Amp, TokenKind.Star, TokenKind.Slash, TokenKind.KW_DIV, TokenKind.KW_MOD)) {
        parseMulOp();
        parseFactor();
    }
    return;
}

void parseFactor() {
    if (tok.kind == TokenKind.Ident) {
        parseDesignator();
        if (tok.kind == TokenKind.LeftParenthesis) {
            advance();
            if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
                parseExprList();
            }
            if (consume(TokenKind.RightParenthesis))
                goto _error;
        }
    }
    else if (tok.kind.among(TokenKind.Integer, TokenKind.Real)) {
        parseNumber();
    }
    else if (tok.kind == TokenKind.Character) {
        advance();
    }
    else if (tok.kind == TokenKind.String) {
        advance();
    }
    else if (tok.kind == TokenKind.KW_NIL) {
        advance();
    }
    else if (tok.kind == TokenKind.LeftBrace) {
        parseSet();
    }
    else if (tok.kind == TokenKind.LeftParenthesis) {
        advance();
        parseExpr();
        if (consume(TokenKind.RightParenthesis))
            goto _error;
    }
    else if (tok.kind == TokenKind.Tilde) {
        advance();
        parseFactor();
    }
    else {
        /*ERROR*/
        goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Hash, TokenKind.Amp, TokenKind.RightParenthesis, TokenKind.Star, TokenKind.Plus, TokenKind.Comma, TokenKind.Minus, TokenKind.Ellipsis, TokenKind.Slash, TokenKind.Colon, TokenKind.Semi, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_BY, TokenKind.KW_DIV, TokenKind.KW_DO, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_IN, TokenKind.KW_IS, TokenKind.KW_MOD, TokenKind.KW_OF, TokenKind.KW_OR, TokenKind.KW_THEN, TokenKind.KW_TO, TokenKind.KW_UNTIL, TokenKind.RightSquare, TokenKind.Pipe, TokenKind.RightBrace, TokenKind.Eoi))
        advance();
}

void parseSet() {
    if (consume(TokenKind.LeftBrace))
        goto _error;
    if (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String)) {
        parseElement();
        while (tok.kind == TokenKind.Comma) {
            advance();
            parseElement();
        }
    }
    if (consume(TokenKind.RightBrace))
        goto _error;
    return;
_error:
    while (!tok.kind.among(TokenKind.Hash, TokenKind.Amp, TokenKind.RightParenthesis, TokenKind.Star, TokenKind.Plus, TokenKind.Comma, TokenKind.Minus, TokenKind.Ellipsis, TokenKind.Slash, TokenKind.Colon, TokenKind.Semi, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_BY, TokenKind.KW_DIV, TokenKind.KW_DO, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_IN, TokenKind.KW_IS, TokenKind.KW_MOD, TokenKind.KW_OF, TokenKind.KW_OR, TokenKind.KW_THEN, TokenKind.KW_TO, TokenKind.KW_UNTIL, TokenKind.RightSquare, TokenKind.Pipe, TokenKind.RightBrace, TokenKind.Eoi))
        advance();
}

void parseElement() {
    parseExpr();
    if (tok.kind == TokenKind.Ellipsis) {
        advance();
        parseExpr();
    }
    return;
}

void parseRelation() {
    switch (tok.kind) {
        case TokenKind.Equal:
            advance();
            break;
        case TokenKind.Hash:
            advance();
            break;
        case TokenKind.Less:
            advance();
            break;
        case TokenKind.LessEqual:
            advance();
            break;
        case TokenKind.Greater:
            advance();
            break;
        case TokenKind.GreaterEqual:
            advance();
            break;
        case TokenKind.KW_IN:
            advance();
            break;
        case TokenKind.KW_IS:
            advance();
            break;
        default:
            /*ERROR*/
            goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Plus, TokenKind.Minus, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Eoi, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String))
        advance();
}

void parseAddOp() {
    switch (tok.kind) {
        case TokenKind.Plus:
            advance();
            break;
        case TokenKind.Minus:
            advance();
            break;
        case TokenKind.KW_OR:
            advance();
            break;
        default:
            /*ERROR*/
            goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.LeftParenthesis, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Eoi, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String))
        advance();
}

void parseMulOp() {
    switch (tok.kind) {
        case TokenKind.Star:
            advance();
            break;
        case TokenKind.Slash:
            advance();
            break;
        case TokenKind.KW_DIV:
            advance();
            break;
        case TokenKind.KW_MOD:
            advance();
            break;
        case TokenKind.Amp:
            advance();
            break;
        default:
            /*ERROR*/
            goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.LeftParenthesis, TokenKind.KW_NIL, TokenKind.LeftBrace, TokenKind.Tilde, TokenKind.Eoi, TokenKind.Character, TokenKind.Ident, TokenKind.Integer, TokenKind.Real, TokenKind.String))
        advance();
}

void parseDesignator() {
    parseQualident();
    while (tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Period, TokenKind.LeftSquare, TokenKind.Caret) && (!isProcCall())) {
        switch (tok.kind) {
            case TokenKind.Period:
                advance();
                if (consume(TokenKind.Ident))
                    goto _error;
                break;
            case TokenKind.LeftSquare:
                advance();
                parseExprList();
                if (consume(TokenKind.RightSquare))
                    goto _error;
                break;
            case TokenKind.Caret:
                advance();
                break;
            case TokenKind.LeftParenthesis:
                advance();
                parseQualident();
                if (consume(TokenKind.RightParenthesis))
                    goto _error;
                break;
            default:
                /*ERROR*/
                goto _error;
        }
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Hash, TokenKind.Amp, TokenKind.LeftParenthesis, TokenKind.RightParenthesis, TokenKind.Star, TokenKind.Plus, TokenKind.Comma, TokenKind.Minus, TokenKind.Ellipsis, TokenKind.Slash, TokenKind.Colon, TokenKind.ColonEqual, TokenKind.Semi, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_BY, TokenKind.KW_DIV, TokenKind.KW_DO, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_IN, TokenKind.KW_IS, TokenKind.KW_MOD, TokenKind.KW_OF, TokenKind.KW_OR, TokenKind.KW_THEN, TokenKind.KW_TO, TokenKind.KW_UNTIL, TokenKind.RightSquare, TokenKind.Pipe, TokenKind.RightBrace, TokenKind.Eoi))
        advance();
}

void parseExprList() {
    parseExpr();
    while (tok.kind == TokenKind.Comma) {
        advance();
        parseExpr();
    }
    return;
}

void parseIdentList() {
    parseIdentDef();
    while (tok.kind == TokenKind.Comma) {
        advance();
        parseIdentDef();
    }
    return;
}

void parseQualident() {
    if (tok.kind == TokenKind.Ident && (isModule())) {
        advance();
        if (consume(TokenKind.Period))
            goto _error;
    }
    if (consume(TokenKind.Ident))
        goto _error;
    return;
_error:
    while (!tok.kind.among(TokenKind.Hash, TokenKind.Amp, TokenKind.LeftParenthesis, TokenKind.RightParenthesis, TokenKind.Star, TokenKind.Plus, TokenKind.Comma, TokenKind.Minus, TokenKind.Period, TokenKind.Ellipsis, TokenKind.Slash, TokenKind.Colon, TokenKind.ColonEqual, TokenKind.Semi, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_BY, TokenKind.KW_DIV, TokenKind.KW_DO, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_IN, TokenKind.KW_IS, TokenKind.KW_MOD, TokenKind.KW_OF, TokenKind.KW_OR, TokenKind.KW_THEN, TokenKind.KW_TO, TokenKind.KW_UNTIL, TokenKind.LeftSquare, TokenKind.RightSquare, TokenKind.Caret, TokenKind.Pipe, TokenKind.RightBrace, TokenKind.Eoi))
        advance();
}

void parseIdentDef() {
    if (consume(TokenKind.Ident))
        goto _error;
    if (tok.kind.among(TokenKind.Star, TokenKind.Minus)) {
        switch (tok.kind) {
            case TokenKind.Star:
                advance();
                break;
            case TokenKind.Minus:
                advance();
                break;
            default: break;
        }
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.LeftParenthesis, TokenKind.Comma, TokenKind.Colon, TokenKind.Semi, TokenKind.Equal, TokenKind.Eoi))
        advance();
}

void parseNumber() {
    switch (tok.kind) {
        case TokenKind.Integer:
            advance();
            break;
        case TokenKind.Real:
            advance();
            break;
        default:
            /*ERROR*/
            goto _error;
    }
    return;
_error:
    while (!tok.kind.among(TokenKind.Hash, TokenKind.Amp, TokenKind.RightParenthesis, TokenKind.Star, TokenKind.Plus, TokenKind.Comma, TokenKind.Minus, TokenKind.Ellipsis, TokenKind.Slash, TokenKind.Colon, TokenKind.Semi, TokenKind.Less, TokenKind.LessEqual, TokenKind.Equal, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.KW_BY, TokenKind.KW_DIV, TokenKind.KW_DO, TokenKind.KW_ELSE, TokenKind.KW_ELSIF, TokenKind.KW_END, TokenKind.KW_IN, TokenKind.KW_IS, TokenKind.KW_MOD, TokenKind.KW_OF, TokenKind.KW_OR, TokenKind.KW_THEN, TokenKind.KW_TO, TokenKind.KW_UNTIL, TokenKind.RightSquare, TokenKind.Pipe, TokenKind.RightBrace, TokenKind.Eoi))
        advance();
}
